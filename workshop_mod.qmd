---
title: "GitHub 101: A Brief Introduction"
format:
  html:
    page-layout: full
---

# Présentation du workshop

Dans cet atelier, nous explorerons les fondamentaux de GitHub, une plateforme essentielle pour la collaboration et la gestion de projets logiciels. Destiné aux débutants, cet atelier vous guidera à travers les concepts clés de Git et GitHub, y compris la création et la gestion de dépôts, le suivi des modifications de code, l'utilisation des branches, la gestion des pull requests et la résolution des conflits. Vous apprendrez également à naviguer dans l'interface GitHub, à collaborer avec d'autres développeurs et à exploiter les fonctionnalités avancées pour optimiser votre flux de travail. Que vous soyez un développeur novice ou simplement curieux d'en savoir plus sur cette plateforme incontournable, cet atelier vous fournira les compétences nécessaires pour démarrer avec GitHub et améliorer votre productivité dans le développement logiciel.

# Création de votre compte

Créer votre compte personnel sur [***GitHub***](https://github.com/).

```{r}
#| echo: false
#| message: false
library(OmicCircos)
data(TCGA.PAM50_genefu_hg18)
head(TCGA.PAM50_genefu_hg18)
```

-   **TCGA.BC.fus** : Ce tableau contient les données de fusion de gènes pour un individu précis.

```{r}
#| echo: false
#| message: false
library(OmicCircos)
data(TCGA.BC.fus)
head(TCGA.BC.fus)
```

-   **TCGA.BC.cnv.2k.60** : Les variables de ce tableau sont respectivement le chromosome, sa position, le nom du gène observé ainsi que $60$ autres variables représentant $60$ individus différents.

-   **TCGA.BC.gene.exp.2k.60** : Sur $60$ individus, une métrique liée à l'expression génique et le chromosome, sa position et le nom du gène observé sont consignés.

-   **TCGA.BC.sample60** : Ce tableau référence le type de cancer (Normal, LumA, LumB, Basal ou Her2) dont sont atteints $60$ personnes.

# Recueil des données

Afin de mettre en oeuvre les différentes méthodes de visualisation, il nous faut d'abord recueillir les données et les mettre en forme. Pour cela, suivez les étapes présentées ci-dessous :

-   **ÉTAPE 1** : Chargement de la librairie `OmicCircos`

Pour pouvoir utiliser `OmicCircos`, il faut tout d'abord l'avoir installé à partir de [Bioconductor](https://bioconductor-org.translate.goog/packages/release/bioc/html/OmicCircos.html?_x_tr_sl=en&_x_tr_tl=fr&_x_tr_hl=fr&_x_tr_pto=tc/) puis l'appeler à l'aide de la fonction `library()`.

```{r}
#| eval: FALSE
#| code-fold: true
#| code-summary: "Installer Bioconductor"

if (!require("BiocManager", tranquillement = TRUE))
    install.packages("BiocManager")

BiocManager::install("OmicCircos")
```

```{r}
library(OmicCircos)
```

-   **ÉTAPE 2** : Importation des données

Nos données provenant du package `OmicCircos` (déjà installé), nous les importons à l'aide de la fonction `data()`.

```{r}
data("TCGA.PAM50_genefu_hg18")
data("TCGA.BC.fus")
data("TCGA.BC.cnv.2k.60")
data("TCGA.BC.gene.exp.2k.60")
data("TCGA.BC.sample60")
```

# Visualisations classiques

L'objectif de ces premières visualisations est d'assimiler la construction de graphes en reprenant les concepts de base de la librairie `ggplot2` de `R`. Nous vous apprendrons notamment à tracer des graphes de densités et des histogrammes pour observer les concentrations des mesures d'expression génique et identifier des zones qui se différencient selon les sous-types de cancer.

L'ensemble des visualisations de cette partie s'appuient sur la base de données [*TCGA.PAM50_genefu_hg18*](#basesdedonnées) et nécessite le chargement de divers packages.

```{r, message=FALSE}
# chargement des packages nécessaires
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
library(viridis)
library(viridisLite)
library(hrbrthemes)
```

Les visualisations permettent d'étudier les différents types de cancer présentés dans le [lexique](#lexique).

## Utilisation de `ggplot2`

Le package `ggplot2` fonctionne par couches successives. La première d'entre elles, est un peu le canevas du graphe : elle consiste à indiquer dans quel jeu de données se trouve les données, et quelles sont les variables à représenter. Ensuite, une seconde couche est ajoutée, elle consiste à indiquer le type de graphe à réaliser : scatterplot, boxplot, barplot, etc... Enfin, les couches d'affinage permettent de choisir les couleurs, les échelles des axes, les options de légende et toutes autres options visuelles.

![](./images/schema_ggplot.png)

::: {.callout-important appearance="simple"}
Il ne faut pas oublier le `+` entre les couches successives.
:::

## Comparaison de deux densités

Commençons par étudier certaines densités relatives aux types de cancer du sein deux à deux afin d'en retirer leurs différences.

Voici un exemple très simple de visualisation graphique de la **comparaison des densités des types de cancer *LumA* et *LumB*** qui sont ceux les plus aggressifs :

```{r}
#| output: false

# création de la base de données
data <- data.frame(value=c(TCGA.PAM50_genefu_hg18$LumA,
                           TCGA.PAM50_genefu_hg18$LumB),
                   type=c(rep("LumA", 50),
                          rep("LumB", 50)))

# création du graphe
comparaison <- data %>%
    # création de l'objet
    ggplot(aes(x=value, fill=type)) +
    # définition du type de graphe
    geom_density()

# affichage du graphe
print(comparaison)
```

::: {.callout-note appearance="simple"}
## `%>%`

Cet opérateur est un pipe, fréquemment représenté par une barre verticale `|` dans les terminaux : il renvoie la sortie d'une commande vers l'entrée d'une autre.
:::

```{r}
#| echo: false

# création de la base de données
data <- data.frame(value=c(TCGA.PAM50_genefu_hg18$LumA,
                           TCGA.PAM50_genefu_hg18$LumB),
                   type=c(rep("LumA", 50),
                          rep("LumB", 50)))

# création du graphe
comparaison <- data %>%
    # création de l'objet
    ggplot(aes(x=value, fill=type)) +
    # définition du type de graphe
    geom_density()

# affichage du graphe
print(comparaison)
```

De nombreuses options de `ggplot` peuvent améliorer l'apparence générale des graphes. Dans l'exemple ci-dessous, vous pouvez retrouver respectivement la définition manuelle des couleurs, l'option de non-affichage de la légende associée à la coloration en fonction du type, ainsi que la personnalisation des éléments de texte et des légendes. Enfin, l'option `alpha` de `geom_density` règle la transparence de remplissage sous les courbes de densité.

```{r}
# création du graphe
comparaison <- data %>%
  # création de l'objet
  ggplot(aes(x=value, fill=type)) +
  # définition du type de graphe
  geom_density(aes(color=type), alpha=0.4) +
  # réglage des couleurs de légende
  scale_color_manual(values=c("darkblue", "deeppink")) +
  scale_fill_manual(values=c("darkblue", "deeppink")) +
  # choix de l'affichage de la légende
  guides(color="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Densité") +
  labs(title="Comparaison de la densité d'expression génique entre différents types de cancer",
       fill="Type de cancer")

# affichage du graphe
print(comparaison)
```

À l'aide de ce graphe, nous pouvons remarquer que l'ARNmessager des gènes des deux types de cancer *LumA* et *LumB* ne s'exprime pas de la même façon. En effet, celui de *LumA* présente un mode autour de $-0.5$ tandis que celui de *LumB* présente un mode légèrement plus haut autour de $0.4$.

Il est également possible de représenter les densités sur deux graphes différents en utilisant la commande `facet_wrap(~XXX)`.

::: {.callout-note appearance="simple"}
## Utilisation de `facet_wrap()`

Les échelles des différents graphiques peuvent être formatées différemment à l'aide de l'option `scales` : `"fixed"` permet d'obtenir des échelles égales pour tous les graphes mais d'autres options telles que `"free_x"`, `"free_y"` ou `"free"` sont envisageables.
:::

```{r}
# création du graphe
comparaison <- data %>%
  # création de l'objet
  ggplot(aes(x=value, fill=type)) +
  # définition du type de graphe
  geom_density(aes(color=type), alpha=0.4) +
  # séparation du graphe en sous parties
  facet_wrap(~type, scales="fixed") +
  # réglage des couleurs de légende
  scale_color_manual(values=c("darkblue", "deeppink")) +
  scale_fill_manual(values=c("darkblue", "deeppink")) +
  # choix de l'affichage de la légende
  guides(color="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size = 8),
        plot.title=element_text(size=10, hjust = 0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Densité") +
  labs(title="Comparaison de la densité d'expression génique entre différents types de cancer",
       fill="Type de cancer")

# affichage du graphe
print(comparaison)
```

### À vous de jouer

**En vous appuyant sur l'exemple précédent, remplissez les trous du code ci-dessous (indiqués par 'XXX') afin de représenter graphiquement la comparaison des densités d'expression d'ARNmessager pour les gènes des types de cancer *Her2* et *Normal*.**

::: {.callout-note appearance="simple"}
Les données relatives aux cancer de type *Normal* sont contenues dans la variable *Normal* de la base de données.
:::

::: {.callout-important appearance="simple"}
Par la suite, les couleurs utilisées pour la représentation de *Her2* et *Normal* seront respectivement `darkgreen` et `darkorange`.
:::

```{r}
#| eval: false
#| output: false

# création de la base de données
data <- data.frame(value=c(TCGA.PAM50_genefu_hg18$XXX,
                           TCGA.PAM50_genefu_hg18$XXX),
                   type=c(rep("XXX", 50),
                          rep("XXX", 50)))

# création du graphe
comparaison <- data %>%
  # création de l'objet
  ggplot(aes(x=XXX, fill=XXX)) +
  # définition du type de graphe
  geom_density(aes(color=XXX), alpha=0.4) +
  # réglage des couleurs de légende
  scale_color_manual(values=c("XXX", "XXX")) +
  scale_fill_manual(values=c("XXX", "XXX")) +
  # choix de l'affichage de la légende
  guides(color="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Densité") +
  labs(title="Comparaison de la densité d'expression génique entre différents types de cancer",
       fill="Type de cancer")

# affichage du graphe
print(comparaison)
```

```{r}
#| code-fold: true
#| code-summary: "Afficher la Solution"
#| output: true

# création de la base de données
data <- data.frame(value=c(TCGA.PAM50_genefu_hg18$Her2,
                           TCGA.PAM50_genefu_hg18$Normal),
                   type=c(rep("Her2", 50),
                          rep("Normal", 50)))

# création du graphe
comparaison <- data %>%
  # création de l'objet
  ggplot(aes(x=value, fill=type)) +
  # définition du type de graphe
  geom_density(aes(color=type), alpha=0.4) +
  # réglage des couleurs de légende
  scale_color_manual(values=c("darkgreen", "darkorange")) +
  scale_fill_manual(values=c("darkgreen", "darkorange")) +
  # choix de l'affichage de la légende
  guides(color="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Densité") +
  labs(title="Comparaison de la densité d'expression génique entre différents types de cancer",
       fill="Type de cancer")

# affichage du graphe
print(comparaison)
```

La densité de l'expression de l'ARNmessager de ce type de cancer est beaucoup plus dispersée que celle du type de cancer *Her2* et se mélange ainsi facilement dans les profils génomiques des autres types de cancer. Ce graphique met alors en évidence la difficulté à distinguer le cancer de type *Normal* des autres types de cancer.

## Comparaison de toutes les densités

### À vous de jouer

**Pour mieux visualiser les différences entre tous les types de cancer, représentez la comparaison de la densité de l'ensemble des types de cancer. Vous pouvez copier-coller les codes précédents et ajouter/modifier uniquement le nécessaire.**

::: {.callout-important appearance="simple"}
Il est important de préciser au graphe que la variable doit être considéré comme une densité à l'aide de la commande `aes(y=after_stat(density))`. La fonction `after_stat()` permet de mettre à l'échelle l'ensemble des données pour oberver les modes sans qu'aucune densité n'écrase les autres.
:::

```{r}
#| code-fold: true
#| code-summary: "Afficher la Solution"
#| output: true

# création de la base de données
data <- data.frame(type=c(rep("LumA", 50),
                          rep("LumB", 50),
                          rep("Basal", 50),
                          rep("Her2", 50),
                          rep("Normal", 50)),
                  subtype=rep(TCGA.PAM50_genefu_hg18$chr, each=50),
                  value=c(TCGA.PAM50_genefu_hg18$LumA,
                          TCGA.PAM50_genefu_hg18$LumB,
                          TCGA.PAM50_genefu_hg18$Basal,
                          TCGA.PAM50_genefu_hg18$Her2,
                          TCGA.PAM50_genefu_hg18$Normal))

# densités des différents types de cancer
density <- data %>%
  # création de l'objet
  ggplot(aes(x=value, fill=type)) +
  # définition du type de graphe
  geom_density(aes(y=after_stat(density),color=type),
               linewidth=0.5, alpha=0.4, fill=NA) +
  # réglage des couleurs de légende
  scale_color_manual(values=c("gold",
                              "darkgreen",
                              "darkblue",
                              "deeppink",
                              "darkorange")) +
  scale_fill_manual(values=c("gold",
                             "darkgreen",
                             "darkblue",
                             "deeppink",
                             "darkorange")) +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Densité") +
  labs(title="Comparaison de la densité d'expression génique entre différents types de cancer",
       color="Type de cancer")

# affichage du graphe
print(density)
```

Nous remarquons à nouveau une densité d'expression de l'ARNm très dispersée pour le type de cancer du sein *Normal*. De plus, les densités pour les types de cancer *Basal* et *LumB* sont assez similaires : *Basal* présente un mode légèrement plus haut et et une courbe plus concentrée autour de $0.5$. Notons également que *LumA* est le seul type de cancer pour lequel la densité est bimodale. Pour l'ensemble des densités tracées, on observe des artéfacts sur les bords : ce sont des valeurs atypiques créant des bosses sur la courbe dû à la méthode des noyaux utilisée pour l'estimation de la densité.

::: {.callout-warning appearance="default" icon="false"}
# POUR ALLER PLUS LOIN...

**Ajoutez les histogrammes respectifs des différents types de cancer sur le graphe précédent.**

```{r}
#| code-fold: true
#| code-summary: "Afficher la Solution"
#| output: true
#| message: false

# histogrammes et densités des différents types de cancer
density <- data %>%
  # créationd de l'objet
  ggplot(aes(x=value, fill =type)) +
  # définition du premier type de graphe
  geom_histogram(aes(y=after_stat(density)),
                 color="#e9ecef",
                 alpha=0.3,
                 binwidth=0.5,
                 position="dodge") +
  # définition du second type de graphe
  geom_density(aes(y=after_stat(density), color=type), linewidth=0.5, fill=NA) +
  # réglage des couleurs de légende
  scale_color_manual(values=c("gold", "darkgreen", "darkblue", "deeppink", "darkorange")) +
  scale_fill_manual(values=c("gold", "darkgreen", "darkblue", "deeppink", "darkorange")) +
  # choix de l'affichage de la légende
  guides(color="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Densité") +
  labs(title="Comparaison de la densité d'expression génique entre différents types de cancer",
       fill="Type de cancer")

# affichage du graphe
print(density)
```
:::

::: {.callout-note appearance="simple"}
## `geom_histogram`

Cette commande du package `ggplot2` permet de créer des histogrammes sur R. De nombreuses options sont disponibles comme `color`, `alpha` (règle la transparence du remplissage), `binwidth` (règle la largeur des intervalles) et `position = "identity", "dodge"` (règle la position des bandes).
:::

## Comparaison des comptages du nombre de mesures d'expresion génique de l'ARNmessager pour chacun des chromosomes

### À vous de jouer

**En appliquant les compétences acquises jusqu'ici, remplissez les trous du code ci-dessous (indiqués par 'XXX') afin de représenter les comptages du nombre de mesures d'expression de l'ARNmessager des gènes prises en compte pour le type de cancer *Her2* pour chacun des chromosomes.**

```{r, warning=FALSE, message=FALSE}
#| output: false
#| warning: false
#| eval: false

# création de la base de données
data <- data.frame(type=XXX,
                   value=XXX)

# densité pour chaque chromosome
density <- data %>%
  # création de l'objet
  ggplot(aes(x=XXX, bins=30, color=XXX, fill=XXX)) +
  # définition du premier type de graphe
  geom_histogram(alpha=0.6, position="identity") +
  # séparation du graphe en sous parties
  facet_wrap(~XXX, scales="XXX", nrow=3) +
  # réglage des couleurs de légende
  scale_fill_viridis(discrete=FALSE) +
  scale_color_viridis(discrete=FALSE) +
  # choix de l'affichage de la légende
  guides(color="none", fill="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Comptage") +
  labs(title="Comptages du nombre de mesures d'expression génique pour le type de cancer Her2 sur chacun des chromosomes")

# affichage du graphe
print(density)
```

```{r, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Afficher la Solution"
#| output: true
#| warning: false

# création de la base de données
data <- data.frame(type=TCGA.PAM50_genefu_hg18$chr,
                   value=TCGA.PAM50_genefu_hg18$Her2)

# densité pour chaque chromosome
density <- data %>%
  # création de l'objet
  ggplot(aes(x=value, bins=30, color=type, fill=type)) +
  # définition du premier type de graphe
  geom_histogram(alpha=0.6, position="identity") +
  # séparation du graphe en sous parties
  facet_wrap(~type, scales="fixed", nrow=3) +
  # réglage des couleurs de légende
  scale_fill_viridis(discrete=FALSE) +
  scale_color_viridis(discrete=FALSE) +
  # choix de l'affichage de la légende
  guides(color="none", fill="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Comptage") +
  labs(title="Comptages du nombre de mesures d'expression génique pour le type de cancer Her2 sur chacun des chromosomes")

# affichage du graphe
print(density)
```

Le graphe précédent représente le nombre de mesures d'expression d'ARNmessager prises en compte sur chacun des chromosomes : plus précisémment, il s'agit du nombre de gènes ayant une valeur de test à un endroit donné. Par exemple, pour le chromosome $16$, il y a deux gènes qui ont une d'expression environ égale à $0.21$ pour le type de cancer *Her2*. Ce comptage est clairement variable pour l'ensemble des chromosomes.

::: {.callout-warning appearance="default" icon="false"}
# POUR ALLER PLUS LOIN...

**De la même façon que le graphe précédent, remplissez les trous du code ci-dessous (indiqués par 'XXX') pour représenter graphiquement les comptages du nombre de mesures d'expression de l'ARNmessager des gènes prises en compte pour chaque type de cancer sur chacun des chromosomes.**

```{r, warning=FALSE, message=FALSE}
#| output: false
#| warning: false
#| eval: false

# création de la base de données pour le graphe
data <- data.frame(type=TCGA.PAM50_genefu_hg18$XXX,
                   subtype=c(rep("LumA", 50),
                             rep("LumB", 50),
                             rep("Basal", 50),
                             rep("Her2", 50),
                             rep("Normal", 50)),
                   value=c(XXX,
                           XXX,
                           XXX,
                           XXX,
                           XXX))

# densité pour chaque chromosome
density <- data %>%
  # création de l'objet
  ggplot(aes(x=XXX, fill=XXX, color=XXX)) +
  # définition du premier type de graphe
  geom_histogram(alpha=0.6, position="dodge") +
  # séparation du graphe en sous parties
  facet_wrap(~XXX, scales="XXX", nrow=3) +
  # réglage des couleurs de légende
  scale_color_manual(values=c("gold",
                              "darkgreen",
                              "darkblue",
                              "deeppink",
                              "darkorange")) +
  scale_fill_manual(values=c("gold",
                             "darkgreen",
                             "darkblue",
                             "deeppink",
                             "darkorange")) +
  # choix de l'affichage de la légende
  guides(color="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Comptage") +
  labs(title="Comptages du nombre de mesures d'expression génique pour le type de cancer Her2 sur chacun des chromosomes",
       fill="Type de cancer")

# affichage du graphe
print(density)
```

```{r, warning=FALSE, message=FALSE}
#| code-fold: true
#| code-summary: "Afficher la Solution"
#| output: true

# création de la base de données pour le graphe
data <- data.frame(type=TCGA.PAM50_genefu_hg18$chr,
                   subtype=c(rep("LumA", 50),
                             rep("LumB", 50),
                             rep("Basal", 50),
                             rep("Her2", 50),
                             rep("Normal", 50)),
                   value=c(TCGA.PAM50_genefu_hg18$LumA,
                           TCGA.PAM50_genefu_hg18$LumB,
                           TCGA.PAM50_genefu_hg18$Basal,
                           TCGA.PAM50_genefu_hg18$Her2,
                           TCGA.PAM50_genefu_hg18$Normal))

# densité pour chaque chromosome
density <- data %>%
  # création de l'objet
  ggplot(aes(x=value, fill=subtype, color=subtype)) +
  # définition du premier type de graphe
  geom_histogram(alpha=0.6, position="dodge") +
  # séparation du graphe en sous parties
  facet_wrap(~type, scales="fixed", nrow=3) +
  # réglage des couleurs de légende
  scale_color_manual(values=c("gold",
                              "darkgreen",
                              "darkblue",
                              "deeppink",
                              "darkorange")) +
  scale_fill_manual(values=c("gold",
                             "darkgreen",
                             "darkblue",
                             "deeppink",
                             "darkorange")) +
  # choix de l'affichage de la légende
  guides(color="none") +
  # personnalisation des éléments de texte
  theme(strip.text.x=element_text(size=8),
        plot.title=element_text(size=10, hjust=0.5, face="bold")) +
  # titres
  xlab("Expression d'ARNm") +
  ylab("Comptage") +
  labs(title="Comptages du nombre de mesures d'expression génique pour le type de cancer Her2 sur chacun des chromosomes",
       fill="Type de cancer")

# affichage du graphe
print(density)
```

En comparant le comptage du nombre de mesures d'expression de l'ARNm pour l'ensemble des types de cancer, nous remarquons que les conclusions faites pour le type de cancer *Her2* peuvent être utilisées à nouveau. En effet, les comptages sont très variables selon le chromosome observé. De plus, ceux-ci dépendent également du sous-type de cancer. Par exemple, le chromosome $8$ présente un seul comptage égal à $2$ pour le sous-type *Her2* tandis que les autres sous-types de cancer présentent des comptages dispersés à différentes valeurs d'expression d'ARNm.
:::

# Création de HEATMAP

Une heatmap (ou carte thermique) est une méthode de visualisation qui permet de représenter des données de grande dimension. C'est une représentation sous forme de grille de cellules colorées. Cette méthode peut être utilisée pour visualiser les observations, les corrélations ou des valeurs manquantes par exemple.

## Mise en forme des données

```{r}
# vecteur comprenant les positions de lignes des personnes
# possédant un cancer de type Her2
Her2.i = which(TCGA.BC.sample60[,2] == "Her2")

# vecteur comprenant les identifiants des personnes
# présentant un cancer de type Her2
Her2.n = TCGA.BC.sample60[Her2.i,1]

# indices des colonnes de TCGA.BC.cnv.2k.60 dont
# les identifiants sont présents dans Her2.n
Her2.j = which(colnames(TCGA.BC.cnv.2k.60)%in%Her2.n)

# création d'un data d'expression des différents gènes
# pour chaque individus présentant un cancer Her2
cnv = TCGA.BC.cnv.2k.60[,c(1:3,Her2.j)]

# data cnv auquel on a enlevé les 3 premières colonnes
cnv.m = cnv[,c(4:ncol(cnv))]

# bornage des valeurs >2 et <-2
cnv.m[cnv.m > 2] = 2
cnv.m[cnv.m < -2] = -2

# on ajoute aux 3 premières colonnes de cnv nos données bornées
cnv = cbind(cnv[,1:3], cnv.m)

#  extraction des colonnes 1 à 3 de TCGA.BC.gene.exp.2k.60
# ainsi que des colonnes spécifiées par Her2.j
gene.exp = TCGA.BC.gene.exp.2k.60[,c(1:3,Her2.j)]
```

## Création d'une heatmap intéractive

L'objectif de cette partie est de réaliser des heatmap intéractives représentant les observations.

La librairie `heatmaply` dont nous allons nous servir est incluse dans l'écosystème de `plotly` ([plotly](https://plotly-r.com/overview)) qui est un outil permettant d'inclure de l'interactivité dans les graphiques.

Dans notre exemple de heatmap, vous pourrez notament connaître la valeur d'une cellule en faisant simplement glisser votre souris dessus, zoommer sur les cellules et se déplacer dans la figure.

Pour cette première visualisation, il vous faut donc charger la librairie `heatmaply` et faire un choix de gradient de couleurs à l'aide des commandes suivantes :

```{r}
#| warning : FALSE
#| message : FALSE
#| output: true
library(heatmaply)
gradient_col <- ggplot2::scale_fill_gradient2(
  low="blue", high="red", midpoint=0, limits=c(-8, 8))
print(gradient_col)
```

Vous pouvez trouver ci-joint deux sites donnant des exemples d'utilisation et de l'aide sur la librairie `heatmaply` :

-   [Exemple d'utilisation de heatmaply](https://cran.r-project.org/web/packages/heatmaply/vignettes/heatmaply.html)

-   [Aide heatmaply](https://www.rdocumentation.org/packages/heatmaply/versions/1.4.2/topics/heatmaply)

Dans un premier temps, nous allons sélectionner le chromosome que l'on souhaite étudier.

Prenons ici le chromosome numéro 1.

```{r}
# on sélectionne le chromosome souhaité dans notre dataframe
chr1 <- subset(gene.exp, gene.exp$chr==1)

# on sélectionne les colonnes qui nous intéressent
mydata_1 <- chr1[, 3:18]

# nom des lignes
rownames(mydata_1) <- mydata_1[, 1]

# on supprime la première colonne qui ne contient que des 1
mydata_1 <- mydata_1[, -1]
```

Création de la heatmap à l'aide de `heatmaply` :

```{r}
heatmaply(mydata_1, scale_fill_gradient_fun=gradient_col,
          Colv=NA, Rowv=NA, scale='none', limits=c(-8, 8),
          xlab="Individus", ylab="Gènes",
          main="Expression des gènes du chromosome 1")
```

La heatmap ci-dessus nous donne visuellement une idée de l'expression de chaque gène du chromosome 1. On observe que dans la majorité des cas le gène *CLCA2* est sur-exprimé (les cellules sont rouges), et les gènes *PDZK1* *DLANI1* sont sous-exprimés (les cellules sont bleutées).

::: {.callout-note appearance="simple"}
Vous pouvez choisir d'afficher les corrélations avec la fonction `heatmaply_cor()` ou les valeurs manquantes avec la fonction `heatmaply_na()`.
:::

### A vous de jouer

En vous basant sur l'exemple ci-dessus, créez une heatmap représentant l'expression des gènes du chromosome 17.

Voici une idée du résultat que vous devez obtenir :

```{r}
#| code-fold: true
#| code-summary: "Afficher la Solution"
chr17 <- subset(gene.exp, gene.exp$chr == 17 )
mydata_17 <- chr17[,3:18]
rownames(mydata_17) <- mydata_17[,1]
mydata_17 <- mydata_17[,-1]
heatmaply(mydata_17, scale_fill_gradient_fun=gradient_col,
          Colv=NA, Rowv=NA, scale='none', limits=c(-7, 8),
          xlab="Individus",ylab="Gènes",
          main="Expression des gènes du chromosome 17")
```

## Création d'une heatmap circulaire

L'objectif de cette seconde partie sur les heatmap est de réaliser des heatmap circulaires avec dendrogrammes.

::: {.callout-note apparance="simple"}
La méthode de clustering appliquée est `hclust` soit une méthode de classification hierarchique, la distance utilisée par défaut est celle de Ward. Vous pouvez trouver des informations sur `hclust`au [Lien suivant](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/hclust) et sur la classification hierarchique [ici](https://larmarange.github.io/analyse-R/classification-ascendante-hierarchique.html) et [ici](https://pbil.univ-lyon1.fr/R/pdf/stage7.pdf).
:::

Commencez par charger les packages nécessaires :

```{r}
#| results: hide
#| message: false
#| warning: false
#| output: false
library(circlize)
library(ComplexHeatmap)
```

On effectue une petite modification de notre dataframe en supprimant une colonne qui ne nous sera pas utile par la suite.

```{r}
# suppression de la colonne position
gene.exp2 <- gene.exp[, -2]
```

Pour pouvoir réaliser notre heatmap, il nous faut tout d'abord convertir notre dataframe en matrice :

```{r}
#| message : FALSE
#| warning: FALSE
mat <- as.matrix(gene.exp2, labels=TRUE) # on transforme le dataframe en matrice

# On définit les noms des colonnes et des lignes
row_names <- as.vector(gene.exp2$NAME)
col_names <- c("chr", "NAME", "TCGA.A2.A04W.01A", "TCGA.A2.A0D1.01A",
               "TCGA.A2.A0EQ.01A", "TCGA.A8.A081.01A", "TCGA.A8.A08J.01A",
               "TCGA.A8.A09X.01A", "TCGA.AN.A0FV.01A", "TCGA.AO.A0J2.01A",
               "TCGA.AO.A12D.01A", "TCGA.B6.A0RS.01A", "TCGA.BH.A0EE.01A",
               "TCGA.C8.A12L.01A", "TCGA.C8.A12P.01A", "TCGA.D8.A13Z.01A",
               "TCGA.E2.A1B0.01A")
rownames_factor <- factor(row_names)

# On met notre matrice sous format "numeric"
mat_numeric <- matrix(as.numeric(mat), ncol = ncol(mat))
rownames(mat_numeric) <- row_names
colnames(mat_numeric) <- col_names

# Vecteur des chromosomes :
split <- as.vector(gene.exp2$chr)
split <- factor(split)
```

::: {.callout-note appearance="simple"}
Le vecteur `split`doit contenir les différents groupes/catégories si vous souhaitez divisez votre heatmap par groupes/catégories.
:::

Création des heatmap circulaires :

-   Sur cette première heatmap, nous avons affiché tous les chromosomes ainsi que tous les gènes de manière simple.

```{r}
## Affichage des heatmaps
circos.clear()
circos.par(start.degree=90, gap.degree=3)
col_fun1 = colorRamp2(c(-6, 0, 6), c("blue", "white", "red"))

# heatmap simple
circos.heatmap(mat_numeric[, !(colnames(mat_numeric) %in% c("chr", "NAME"))],
               split=split,
               col=col_fun1)

```

-   Sur cette seconde heatmap, nous avons encadré chaque chromosome et affiché leur numéro.

```{r}
#| message: false
#| warning: false

# heatmap avec les chromosomes associés
circos.clear()
circos.heatmap(mat_numeric[, !(colnames(mat_numeric) %in% c("chr", "NAME"))],
               split=split, col=col_fun1, track.height=0.4,
               bg.border="green", bg.lwd=2, bg.lty=2,
               show.sector.labels=TRUE)

```

-   Sur cette troisième heatmap, nous avons rajouté le nom de chaque gène.

```{r}
#| message: false
#| warning: false

# heatmap avec les chromosomes et les noms des gènes
circos.clear()
circos.heatmap(mat_numeric[, !(colnames(mat_numeric) %in% c("chr", "NAME"))],
               split=split, col=col_fun1, track.height=0.4,
               bg.border="green", bg.lwd=2, bg.lty=2,
               show.sector.labels=TRUE,
               rownames.side="outside", rownames.cex=0.4)



```

-   Sur cette quatrième heatmap, nous avons rajouté les dendrogrammes ainsi qu'une légende de couleur.

```{r}
#| message: false
#| warning: false

# heatmap avec les dendrogrammes
circos.clear()
circos.heatmap(mat_numeric[, !(colnames(mat_numeric) %in% c("chr", "NAME"))],
               split=split, col=col_fun1, track.height=0.4,
               bg.border="green", bg.lwd=2, bg.lty=2,
               show.sector.labels=TRUE,
               dend.side="outside")

lgd = Legend(title="values", col_fun=col_fun1)
grid.draw(lgd)
```

Le nombre de chromosomes étant important, il est compliqué de voir en détail les gènes. L'exercice suivant consiste donc à sélectionner certains chromosomes et à afficher la heatmap circulaire correspondante.

::: {.callout-important appearance="simple"}
Il est important de toujours appeler la commande `circos.clear()` avant chaque nouvelle heatmap.
:::

### A vous de jouer

Sélectionnez les chromosomes 1, 3, 6, 11, 17 et 19.

```{r}
#| eval=FALSE
x <- c("XXX") # vecteur des chromosomes que l'on souhaite sélectionner
data_chr <- gene.exp2[gene.exp2$chr %in% x, ] # dataframe avec nos chromosomes sélectionnés


# Convertion en matrice
mat_chr <- as.matrix(data_chr, labels=TRUE)
mat_chr_numeric <- matrix(as.numeric(mat_chr), ncol = ncol(mat_chr))

# On définit les noms des colonnes et des lignes
row_names_chr <- as.vector(data_chr$NAME)
col_names_chr <- c("chr", "NAME", "TCGA.A2.A04W.01A", "TCGA.A2.A0D1.01A",
               "TCGA.A2.A0EQ.01A", "TCGA.A8.A081.01A", "TCGA.A8.A08J.01A",
               "TCGA.A8.A09X.01A", "TCGA.AN.A0FV.01A", "TCGA.AO.A0J2.01A",
               "TCGA.AO.A12D.01A", "TCGA.B6.A0RS.01A", "TCGA.BH.A0EE.01A",
               "TCGA.C8.A12L.01A", "TCGA.C8.A12P.01A", "TCGA.D8.A13Z.01A",
               "TCGA.E2.A1B0.01A")


rownames(mat_chr_numeric) <- row_names_chr
colnames(mat_chr_numeric) <- col_names_chr

# Vecteur des chromosomes :
split2 <- as.vector(data_chr$chr)
split2 <- factor(split2)
```

Réaliser maintenant une heatmap affichant les noms des gènes ainsi que les dendrogrammes.

Voici une idée du résultat que vous devez obtenir :

```{r}
#| code-fold: true
#| code-summary: "Afficher la Solution"
#| message: false
#| warning: false
x <- c(1, 3, 6, 11, 17, 19)
data_chr <- gene.exp2[gene.exp2$chr %in% x, ]

mat_chr <- as.matrix(data_chr, labels=TRUE)
mat_chr_numeric <- matrix(as.numeric(mat_chr), ncol = ncol(mat_chr))

row_names_chr <- as.vector(data_chr$NAME)
col_names_chr <- c("chr", "NAME", "TCGA.A2.A04W.01A", "TCGA.A2.A0D1.01A",
               "TCGA.A2.A0EQ.01A", "TCGA.A8.A081.01A", "TCGA.A8.A08J.01A",
               "TCGA.A8.A09X.01A", "TCGA.AN.A0FV.01A", "TCGA.AO.A0J2.01A",
               "TCGA.AO.A12D.01A", "TCGA.B6.A0RS.01A", "TCGA.BH.A0EE.01A",
               "TCGA.C8.A12L.01A", "TCGA.C8.A12P.01A", "TCGA.D8.A13Z.01A",
               "TCGA.E2.A1B0.01A")


rownames(mat_chr_numeric) <- row_names_chr
colnames(mat_chr_numeric) <- col_names_chr

split2 <- as.vector(data_chr$chr)
split2 <- factor(split2)

circos.clear()
circos.heatmap(mat_chr_numeric[, !(colnames(mat_chr_numeric) %in% c("chr", "NAME"))],
               split=split2, col=col_fun1, track.height=0.4,
               bg.border="green", bg.lwd = 2, bg.lty=2,
               show.sector.labels=TRUE, dend.side="outside",
               rownames.side="inside", rownames.cex=0.35)
lgd = Legend(title="values", col_fun=col_fun1)
grid.draw(lgd)

```

Vous pouvez consulter le lien suivant si vous souhaitez en apprendre plus sur les heatmap circulaires : [heatmap circulaire](https://jokergoo.github.io/circlize_book/book/circos-heatmap.html)

# Visualisation avec Circos

A présent, nous allons réaliser une visualisation circulaire à l'aide du package `OmicCircos` et de la fonction `circos()`.

Vous pouvez trouver de l'aide au package `OmicCircos` aux liens suivants :

-   [Aide du package](https://bioc.ism.ac.jp/packages/3.7/bioc/manuals/OmicCircos/man/OmicCircos.pdf)

-   [Exemple d'utilisation avec code](https://bioconductor.org/packages/devel/bioc/vignettes/OmicCircos/inst/doc/OmicCircos_vignette.pdf)

-   [Zoom sur des secteurs](https://jokergoo.github.io/circlize_book/book/advanced-layout.html#zooming-of-sectors)

Voici la réalisation finale que nous allons décortiquer étape par étape.

```{r, circos}
#| echo: false

colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)


# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)

# nombre de copies (gain_rouge, perte_bleu)
circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

# creation de l'histogramme
circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)


# Mise en valeur des chromosomes 11 et 17
highlight = c(140, 400, 11, 282412.5, 11, 133770314.5, "#FFFF0080", "#FFFF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#FFFF0080")

highlight = c(140, 400, 17, 739525, 17, 78385909, "#00FF0080", "#00FF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#00FF0080")

highlight.link1 = c(400, 400, 140, 376.8544, 384.0021,
                    450, 540.5)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link1, col = "#FFFF0080", lwd = 1)

highlight.link2 = c(400, 400, 140, 419.1154, 423.3032,
                    543, 627)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link2, col = "#00FF0080", lwd = 1)


####### Moitié gauche du cercle #######

# Chromosome 11 
zoom = c(11, 11, 282412.5, 133770314.5, 180, 270)

circos(type = "chr",R = 400, cir = "hg18", W = 4, print.chr.lab = TRUE, 
       scale = TRUE, zoom = zoom)

circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, lwd = 0.01,
       zoom = zoom)

circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)




# Chromosome 17 
zoom = c(17, 17, 739525, 78385909, 274, 356)

circos(type = "chr", R = 400, cir = "hg18", W = 4, print.chr.lab = TRUE, 
       scale = TRUE, zoom = zoom)

circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4,  cluster = FALSE, lwd = 0.01,
       zoom = zoom)

circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4,  B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4,  B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)

```

-   Placement des chromosomes et des gènes

```{r, circos1}
colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)
```

-   Création de heatmap

```{r, circos2}
#| eval: false

# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)
```

```{r, circos3}
#| echo: false

colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)


# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)
```

-   Ajout de l'étude du nombre de copies

```{r, circos5}
#| eval: false

# nombre de copies (gain_rouge, perte_bleu)
circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)
```

```{r, circos6}
#| echo: false

colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)


# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)

# nombre de copies (gain_rouge, perte_bleu)
circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)
```

-   Création d'un histogramme

```{r}
#| eval: false

# creation de l'histogramme
circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)

```

```{r}
#| echo: false

colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)


# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)

# nombre de copies (gain_rouge, perte_bleu)
circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

# creation de l'histogramme
circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)

```

-   Zoom sur les chromosomes 11 et 17

```{r}
#| eval: false

# Mise en valeur des chromosomes 11 et 17
highlight = c(140, 400, 11, 282412.5, 11, 133770314.5, "#FFFF0080", "#FFFF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#FFFF0080")

highlight = c(140, 400, 17, 739525, 17, 78385909, "#00FF0080", "#00FF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#00FF0080")

highlight.link1 = c(400, 400, 140, 376.8544, 384.0021,
                    450, 540.5)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link1, col = "#FFFF0080", lwd = 1)

highlight.link2 = c(400, 400, 140, 419.1154, 423.3032,
                    543, 627)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link2, col = "#00FF0080", lwd = 1)


```

```{r}
#| echo: false

colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)


# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)

# nombre de copies (gain_rouge, perte_bleu)
circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

# creation de l'histogramme
circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)


# Mise en valeur des chromosomes 11 et 17
highlight = c(140, 400, 11, 282412.5, 11, 133770314.5, "#FFFF0080", "#FFFF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#FFFF0080")

highlight = c(140, 400, 17, 739525, 17, 78385909, "#00FF0080", "#00FF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#00FF0080")

highlight.link1 = c(400, 400, 140, 376.8544, 384.0021,
                    450, 540.5)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link1, col = "#FFFF0080", lwd = 1)

highlight.link2 = c(400, 400, 140, 419.1154, 423.3032,
                    543, 627)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link2, col = "#00FF0080", lwd = 1)
```

Maintenant passons à la partie gauche du cercle :

-   Pour le chromosome 11 :

```{r}
#| eval: false

####### Moitié gauche du cercle #######

# Chromosome 11 
zoom = c(11, 11, 282412.5, 133770314.5, 180, 270)

circos(type = "chr",R = 400, cir = "hg18", W = 4, print.chr.lab = TRUE, 
       scale = TRUE, zoom = zoom)

circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, lwd = 0.01,
       zoom = zoom)

circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)

```

```{r}
#| echo: false

colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)


# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)

# nombre de copies (gain_rouge, perte_bleu)
circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

# creation de l'histogramme
circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)


# Mise en valeur des chromosomes 11 et 17
highlight = c(140, 400, 11, 282412.5, 11, 133770314.5, "#FFFF0080", "#FFFF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#FFFF0080")

highlight = c(140, 400, 17, 739525, 17, 78385909, "#00FF0080", "#00FF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#00FF0080")

highlight.link1 = c(400, 400, 140, 376.8544, 384.0021,
                    450, 540.5)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link1, col = "#FFFF0080", lwd = 1)

highlight.link2 = c(400, 400, 140, 419.1154, 423.3032,
                    543, 627)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link2, col = "#00FF0080", lwd = 1)


####### Moitié gauche du cercle #######

# Chromosome 11 
zoom = c(11, 11, 282412.5, 133770314.5, 180, 270)

circos(type = "chr",R = 400, cir = "hg18", W = 4, print.chr.lab = TRUE, 
       scale = TRUE, zoom = zoom)

circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, lwd = 0.01,
       zoom = zoom)

circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)



```

-   Pour le chromosome 17 :

```{r}
#| eval: false

# Chromosome 17 
zoom = c(17, 17, 739525, 78385909, 274, 356)

circos(type = "chr", R = 400, cir = "hg18", W = 4, print.chr.lab = TRUE, 
       scale = TRUE, zoom = zoom)

circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4,  cluster = FALSE, lwd = 0.01,
       zoom = zoom)

circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4,  B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4,  B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)


```

```{r}
#| echo: false

colors = rainbow(10, alpha = 0.5)   # choix des couleurs 

# Si vous souhaitez enregistrer votre image sous forme de pdf 
#pdf("visucomp_histo.pdf", 8,8) # nom de l'image
#par(mar = c(2, 2, 2, 2))  # definition de la fenetre graphique
 
plot(c(1,1000), c(1,800), type = "n", axes = FALSE, xlab = "", ylab = "", main = "") 
zoom = c(1, 22, 939245.5, 154143883, 0, 180)

######  Moitié droite du cercle ##########

# mettre les chromosomes et l'emplacement des genes
circos(type = "chr", R = 400, cir = "hg18", W = 3.5, 
       print.chr.lab = TRUE, scale = TRUE, zoom = zoom)


# creation de la heatmap
circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, 
       col.bar = TRUE, lwd = 0.01, zoom = zoom)

# nombre de copies (gain_rouge, perte_bleu)
circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

# creation de l'histogramme
circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)


# Mise en valeur des chromosomes 11 et 17
highlight = c(140, 400, 11, 282412.5, 11, 133770314.5, "#FFFF0080", "#FFFF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#FFFF0080")

highlight = c(140, 400, 17, 739525, 17, 78385909, "#00FF0080", "#00FF0080")

circos(type = "hl", R = 110, cir = "hg18", W = 40, 
       mapping = highlight, lwd = 2, zoom = zoom, 
       col="#00FF0080")

highlight.link1 = c(400, 400, 140, 376.8544, 384.0021,
                    450, 540.5)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link1, col = "#FFFF0080", lwd = 1)

highlight.link2 = c(400, 400, 140, 419.1154, 423.3032,
                    543, 627)

circos(type = "highlight.link", cir = "hg18", 
       mapping = highlight.link2, col = "#00FF0080", lwd = 1)


####### Moitié gauche du cercle #######

# Chromosome 11 
zoom = c(11, 11, 282412.5, 133770314.5, 180, 270)

circos(type = "chr",R = 400, cir = "hg18", W = 4, print.chr.lab = TRUE, 
       scale = TRUE, zoom = zoom)

circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4, cluster = FALSE, lwd = 0.01,
       zoom = zoom)

circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4, B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)




# Chromosome 17 
zoom = c(17, 17, 739525, 78385909, 274, 356)

circos(type = "chr", R = 400, cir = "hg18", W = 4, print.chr.lab = TRUE, 
       scale = TRUE, zoom = zoom)

circos(type = "heatmap2", R = 300, cir = "hg18", W = 100, 
       mapping = gene.exp, col.v = 4,  cluster = FALSE, lwd = 0.01,
       zoom = zoom)

circos(type = "ml3", R = 220, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4,  B = FALSE, lwd = 1, cutoff = 0,
       zoom = zoom)

circos(type = "h", R = 140, cir = "hg18", W = 80, mapping = cnv,
       col.v = 4,  B = TRUE, lwd = 1, col = colors[1],
       zoom = zoom)


```

Au total, de l'extérieur vers l'intérieur, vous pouvez trouver :

-   le numéro du chromosome et la position des gènes

-   une heatmap de l'expression des gènes

-   le nombre de copies de chaque gènes par rapport à la normale (rouge : gain, bleu : perte)

-   des histogrammes pour observer la dispersion des distributions

# Lexique {#lexique}

-   **hg18** : La représentation du génome humain a connu plusieurs versions avant d'aboutir à la représentation la plus optimale. La version 18 correspond à l'avant dernière version.

-   **Her2** : Il s'agit d'une protéine naturellement présente dans l'organisme : un récepteur transmembranaire impliqué dans la régulation de la prolifération cellulaire.

-   **LumA** : Le cancer du sein Luminal A est l'un des sous-types luminaux et est généralement associé à des caractéristiques moins agressives que Luminal B.

-   **LumB** : Ce type de cancer du sein est associé à un grade plus élevé, des taux de prolifération accrus, et un pronostic global plus défavorable.

-   **Basal** : Il s'agit d'un sous-type du cancer du sein négatif pour les récepteurs d'oestrogène (ER), les récepteurs de progestérone (PR) et le récepteur 2 du facteur de croissance épidermique humain (HER2). On le désigne souvent comme un cancer du sein triple négatif (TNBC).
